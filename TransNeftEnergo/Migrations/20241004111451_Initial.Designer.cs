// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TransNeftEnergo.Data;

#nullable disable

namespace TransNeftEnergo.WebAPI.Migrations
{
    [DbContext(typeof(OrganizationDb))]
    [Migration("20241004111451_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TransNeftEnergo.Data.Entity.AccountingPeriod", b =>
                {
                    b.Property<int>("AccountingPeriodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountingPeriodId"));

                    b.Property<int>("CalculationDeviceKey")
                        .HasColumnType("int");

                    b.Property<int>("ElectricityMeasurementPointKey")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AccountingPeriodId");

                    b.HasIndex("CalculationDeviceKey");

                    b.HasIndex("ElectricityMeasurementPointKey");

                    b.ToTable("AccountingPeriods");
                });

            modelBuilder.Entity("TransNeftEnergo.Data.Entity.CalculationDevice", b =>
                {
                    b.Property<int>("ElectricitySupplyPointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ElectricitySupplyPointId"));

                    b.Property<int>("AccountingPeriodKey")
                        .HasColumnType("int");

                    b.Property<int>("ElectricitySupplyPointKey")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ElectricitySupplyPointId");

                    b.HasIndex("AccountingPeriodKey");

                    b.HasIndex("ElectricitySupplyPointKey");

                    b.ToTable("CalculationDevices");
                });

            modelBuilder.Entity("TransNeftEnergo.Data.Entity.CurrentTransformer", b =>
                {
                    b.Property<int>("CurrentTransformerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CurrentTransformerId"));

                    b.Property<int>("ElectricityMeasurementPointKey")
                        .HasColumnType("int");

                    b.Property<float>("KTT")
                        .HasColumnType("real");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("VerificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("CurrentTransformerId");

                    b.HasIndex("ElectricityMeasurementPointKey");

                    b.ToTable("CurrentTransformers");
                });

            modelBuilder.Entity("TransNeftEnergo.Data.Entity.ElectricEnergyMeter", b =>
                {
                    b.Property<int>("ElectricEnergyMeterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ElectricEnergyMeterId"));

                    b.Property<int>("ElectricityMeasurementPointKey")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("VerificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ElectricEnergyMeterId");

                    b.HasIndex("ElectricityMeasurementPointKey");

                    b.ToTable("ElectricEnergyMeters");
                });

            modelBuilder.Entity("TransNeftEnergo.Data.Entity.ElectricityMeasurementPoint", b =>
                {
                    b.Property<int>("ElectricityMeasurementPointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ElectricityMeasurementPointId"));

                    b.Property<int>("AccountingPeriodKey")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ObjectOfConsumptionKey")
                        .HasColumnType("int");

                    b.HasKey("ElectricityMeasurementPointId");

                    b.HasIndex("AccountingPeriodKey");

                    b.HasIndex("ObjectOfConsumptionKey");

                    b.ToTable("ElectricityMeasurementPoints");
                });

            modelBuilder.Entity("TransNeftEnergo.Data.Entity.ElectricitySupplyPoint", b =>
                {
                    b.Property<int>("ElectricitySupplyPointId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ElectricitySupplyPointId"));

                    b.Property<float>("MaxPower")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ObjectOfConsumptionKey")
                        .HasColumnType("int");

                    b.HasKey("ElectricitySupplyPointId");

                    b.HasIndex("ObjectOfConsumptionKey");

                    b.ToTable("ElectricitySupplyPoints");
                });

            modelBuilder.Entity("TransNeftEnergo.Data.Entity.ObjectOfConsumption", b =>
                {
                    b.Property<int>("ObjectOfConsumptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ObjectOfConsumptionId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubsidiaryOrganizationKey")
                        .HasColumnType("int");

                    b.HasKey("ObjectOfConsumptionId");

                    b.HasIndex("SubsidiaryOrganizationKey");

                    b.ToTable("ObjectOfConsumptions");
                });

            modelBuilder.Entity("TransNeftEnergo.Data.Entity.Organization", b =>
                {
                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganizationId");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("TransNeftEnergo.Data.Entity.SubsidiaryOrganization", b =>
                {
                    b.Property<int>("OrganizationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganizationId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrganizationKey")
                        .HasColumnType("int");

                    b.HasKey("OrganizationId");

                    b.HasIndex("OrganizationKey");

                    b.ToTable("SubsidiaryOrganizations");
                });

            modelBuilder.Entity("TransNeftEnergo.Data.Entity.VoltageTransformer", b =>
                {
                    b.Property<int>("VoltageTransformerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoltageTransformerId"));

                    b.Property<int>("ElectricityMeasurementPointKey")
                        .HasColumnType("int");

                    b.Property<float>("KTN")
                        .HasColumnType("real");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("VerificationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("VoltageTransformerId");

                    b.HasIndex("ElectricityMeasurementPointKey");

                    b.ToTable("VoltageTransformers");
                });

            modelBuilder.Entity("TransNeftEnergo.Data.Entity.AccountingPeriod", b =>
                {
                    b.HasOne("TransNeftEnergo.Data.Entity.CalculationDevice", "CalculationDevice")
                        .WithMany()
                        .HasForeignKey("CalculationDeviceKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransNeftEnergo.Data.Entity.ElectricityMeasurementPoint", "ElectricityMeasurementPoint")
                        .WithMany()
                        .HasForeignKey("ElectricityMeasurementPointKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CalculationDevice");

                    b.Navigation("ElectricityMeasurementPoint");
                });

            modelBuilder.Entity("TransNeftEnergo.Data.Entity.CalculationDevice", b =>
                {
                    b.HasOne("TransNeftEnergo.Data.Entity.AccountingPeriod", "AccountingPeriod")
                        .WithMany()
                        .HasForeignKey("AccountingPeriodKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransNeftEnergo.Data.Entity.ElectricitySupplyPoint", "ElectricitySupplyPoint")
                        .WithMany()
                        .HasForeignKey("ElectricitySupplyPointKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountingPeriod");

                    b.Navigation("ElectricitySupplyPoint");
                });

            modelBuilder.Entity("TransNeftEnergo.Data.Entity.CurrentTransformer", b =>
                {
                    b.HasOne("TransNeftEnergo.Data.Entity.ElectricityMeasurementPoint", "ElectricityMeasurementPoint")
                        .WithMany()
                        .HasForeignKey("ElectricityMeasurementPointKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ElectricityMeasurementPoint");
                });

            modelBuilder.Entity("TransNeftEnergo.Data.Entity.ElectricEnergyMeter", b =>
                {
                    b.HasOne("TransNeftEnergo.Data.Entity.ElectricityMeasurementPoint", "ElectricityMeasurementPoint")
                        .WithMany()
                        .HasForeignKey("ElectricityMeasurementPointKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ElectricityMeasurementPoint");
                });

            modelBuilder.Entity("TransNeftEnergo.Data.Entity.ElectricityMeasurementPoint", b =>
                {
                    b.HasOne("TransNeftEnergo.Data.Entity.AccountingPeriod", "AccountingPeriod")
                        .WithMany()
                        .HasForeignKey("AccountingPeriodKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TransNeftEnergo.Data.Entity.ObjectOfConsumption", "ObjectOfConsumption")
                        .WithMany()
                        .HasForeignKey("ObjectOfConsumptionKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountingPeriod");

                    b.Navigation("ObjectOfConsumption");
                });

            modelBuilder.Entity("TransNeftEnergo.Data.Entity.ElectricitySupplyPoint", b =>
                {
                    b.HasOne("TransNeftEnergo.Data.Entity.ObjectOfConsumption", "ObjectOfConsumption")
                        .WithMany()
                        .HasForeignKey("ObjectOfConsumptionKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ObjectOfConsumption");
                });

            modelBuilder.Entity("TransNeftEnergo.Data.Entity.ObjectOfConsumption", b =>
                {
                    b.HasOne("TransNeftEnergo.Data.Entity.SubsidiaryOrganization", "SubsidiaryOrganization")
                        .WithMany()
                        .HasForeignKey("SubsidiaryOrganizationKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubsidiaryOrganization");
                });

            modelBuilder.Entity("TransNeftEnergo.Data.Entity.SubsidiaryOrganization", b =>
                {
                    b.HasOne("TransNeftEnergo.Data.Entity.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("TransNeftEnergo.Data.Entity.VoltageTransformer", b =>
                {
                    b.HasOne("TransNeftEnergo.Data.Entity.ElectricityMeasurementPoint", "ElectricityMeasurementPoint")
                        .WithMany()
                        .HasForeignKey("ElectricityMeasurementPointKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ElectricityMeasurementPoint");
                });
#pragma warning restore 612, 618
        }
    }
}
